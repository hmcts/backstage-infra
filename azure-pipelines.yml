# Docs:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
      - master

variables:
  terraformVersion: 1.4.5
  agentPool: 'ubuntu-latest'
  action:

stages:
  - stage: GetArtifacts
    jobs:
      - job: Validate
        pool:
          vmImage: ${{ variables.agentPool }}
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: ${{ variables.terraformVersion }}
          - task: PowerShell@2
            displayName: Run tests
            inputs:
              targetType: 'inline'
              script: |
                Install-Module -Name Pester -MaximumVersion 4.99.99 -Force -Verbose -Scope CurrentUser
                Invoke-Pester ./ci -OutputFormat NUnitXml -OutputFile ./TEST-CI.xml -EnableExit
              pwsh: true
          - task: PublishTestResults@2
            displayName: 'Publish Test Results **/TEST-*.xml'
            inputs:
              testResultsFormat: NUnit
              failTaskOnFailedTests: true
            condition: always()

      - template: pipeline-templates/terraform-plan.yaml
        parameters:
          environment: 'ptlsbox'
          component: 'backstage'
          service_connection: 'DTS-CFTPTL-INTSVC(1baf5470-1c3e-40d3-a6f7-74bfbce4b348)'
          storage_account_rg: 'core-infra-intsvc-rg'
          storage_account_name: 'cftsboxintsvc'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}
      - template: pipeline-templates/terraform-plan.yaml
        parameters:
          environment: 'ptl'
          component: 'backstage'
          service_connection: 'DTS-CFTPTL-INTSVC'
          storage_account_rg: 'core-infra-intsvc-rg'
          storage_account_name: 'cftptlintsvc'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}
      - job: Archive
        dependsOn: Plan_ptlsbox_backstage
        pool:
          vmImage: ${{ variables.agentPool }}
        steps:
          - task: CopyFiles@2
            displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
            inputs:
              Contents: |
                *.tf
                *.tfvars
                *tfplan
              TargetFolder: '$(Build.ArtifactStagingDirectory)'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact: drop'

  - stage: Applybackstage
    displayName: "Apply backstage - SBOX"
    dependsOn: GetArtifacts
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - template: pipeline-templates/terraform-apply.yaml
        parameters:
          environment: 'ptlsbox'
          component: 'backstage'
          service_connection: 'DTS-CFTPTL-INTSVC(1baf5470-1c3e-40d3-a6f7-74bfbce4b348)'
          storage_account_rg: 'core-infra-intsvc-rg'
          storage_account_name: 'cftsboxintsvc'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}
      - template: pipeline-templates/terraform-apply.yaml
        parameters:
          environment: 'ptl'
          component: 'backstage'
          service_connection: 'DTS-CFTPTL-INTSVC'
          storage_account_rg: 'core-infra-intsvc-rg'
          storage_account_name: 'cftptlintsvc'
          build: $(Build.BuildNumber)
          agentPool: ${{ variables.agentPool }}
          terraformVersion: ${{ variables.terraformVersion }}
